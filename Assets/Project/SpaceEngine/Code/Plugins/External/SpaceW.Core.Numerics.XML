<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpaceW.Core.Numerics</name>
    </assembly>
    <members>
        <member name="T:SpaceEngine.Core.Numerics.Complex">
            <summary>
                Represents a complex number, of the form (A + Bi).
            </summary>
        </member>
        <member name="F:SpaceEngine.Core.Numerics.Complex.Zero">
            <summary>
                Returns a new <see cref="T:SpaceEngine.Core.Numerics.Complex" /> with a real number equal to
                zero and an imaginary number equal to zero.
            </summary>
        </member>
        <member name="F:SpaceEngine.Core.Numerics.Complex.One">
            <summary>
                Returns a new <see cref="T:SpaceEngine.Core.Numerics.Complex" /> with a real number equal to
                one and an imaginary number equal to zero.
            </summary>
        </member>
        <member name="F:SpaceEngine.Core.Numerics.Complex.I">
            <summary>
                Returns a new <see cref="T:SpaceEngine.Core.Numerics.Complex" /> with a real number equal to
                zero and an imaginary number equal to one.
            </summary>
        </member>
        <member name="F:SpaceEngine.Core.Numerics.Complex.A">
            <summary>
                The real component of the complex number.
            </summary>
        </member>
        <member name="F:SpaceEngine.Core.Numerics.Complex.B">
            <summary>
                The imaginary component of the complex number.
            </summary>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.#ctor(System.Double,System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:SpaceEngine.Core.Numerics.Complex" /> using
                the specified real and imaginary values.
            </summary>
            <param name="a">The real component of the complex number.</param>
            <param name="b">The imaginary component of the complex number.</param>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)">
            <summary>
                Creates a complex number from a point's polar coordinates.
            </summary>
            <param name="magnitude">
                The magnitude, which is the distance from the origin (the intersection of
                the x-axis and the y-axis) to the number.
            </param>
            <param name="phase">
                The phase, which is the angle from the line to the horizontal axis, measured
                in radians.
            </param>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.FromPolarCoordinates(SpaceEngine.Core.Numerics.Geometry.PolarCoordinate)">
            <summary>
                Creates a complex number from a point's polar coordinates.
            </summary>
            <param name="coordinate">The polar coordinate</param>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Negative(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns the additive inverse of a complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The negative of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Add(SpaceEngine.Core.Numerics.Complex,SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Adds two complex numbers and returns the result.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
            <returns>The sum of left and right.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Subtract(SpaceEngine.Core.Numerics.Complex,SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Subtracts one complex number from another and returns the result.
            </summary>
            <param name="left">The value to subtract from (the minuend).</param>
            <param name="right">The value to subtract (the subtrahend).</param>
            <returns>The result of subtracting right from left (the difference).</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Multiply(SpaceEngine.Core.Numerics.Complex,SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns the product of two complex numbers.
            </summary>
            <param name="left">The first complex number to multiply.</param>
            <param name="right">The second complex number to multiply.</param>
            <returns>The product of the left and right parameters.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Divide(SpaceEngine.Core.Numerics.Complex,SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Divides one complex number by another and returns the result.
            </summary>
            <param name="left">The complex number to be divided (the dividend).</param>
            <param name="right">The complex number to divide by (the divisor).</param>
            <returns>The result of dividing left by right (the quotient).</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.op_UnaryPlus(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns the identity of a specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The identity of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.op_UnaryNegation(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns the additive inverse of a specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The negative of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.op_Addition(SpaceEngine.Core.Numerics.Complex,SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Adds two complex numbers.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
            <returns>The sum of left and right.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.op_Subtraction(SpaceEngine.Core.Numerics.Complex,SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Subtracts a complex number from another complex number.
            </summary>
            <param name="left">The value to subtract from (the minuend).</param>
            <param name="right">The value to subtract (the subtrahend).</param>
            <returns>The result of subtracting right from left (the difference).</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.op_Multiply(SpaceEngine.Core.Numerics.Complex,SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Multiplies two specified complex numbers.
            </summary>
            <param name="left">The first value to multiply.</param>
            <param name="right">The second value to multiply.</param>
            <returns>The product of left and right.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.op_Division(SpaceEngine.Core.Numerics.Complex,SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Divides a specified complex number by another specified complex number.
            </summary>
            <param name="left">The value to be divided (the dividend).</param>
            <param name="right">The value to divide by (the divisor).</param>
            <returns>The result of dividing left by right (the quotient).</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Dot(SpaceEngine.Core.Numerics.Complex,SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Calculates the dot product (inner product) of two complex numbers.
            </summary>
            <param name="left">First source complex number.</param>
            <param name="right">Second source complex number.</param>
            <returns>The dot product of the two complex numbers.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Real(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Return real part of a complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The real part of a complex number.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Imaginary(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Return imaginary part of a complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The imaginary part of a complex number.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.AbsoluteSquared(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Computes the absolute squared value of a complex number and returns the result.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The absolute squared value of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Absolute(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Computes the absolute value (or modulus or magnitude) of a complex number and returns the result.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The absolute value of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Normalize(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Computes the normalized value (or unit) of a complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The normalized value of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Reciprocal(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns the multiplicative inverse of a complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The reciprocal of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Conjugate(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Computes the conjugate of a complex number and returns the result.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The conjugate of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Argument(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Computes the argument (or phase) of a complex number and returns the result.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The argument of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.IsInfinity(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns a value indicating wheter any components of the specified complex number evaluate to
                negative or positive infinity.
            </summary>
            <param name="value">A complex number.</param>
            <returns>
                true if any component evaluates to System.Double.PositiveInfinity or System.Double.NegativeInfinity;
                otherwise, false.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.IsNaN(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns a value indicating wheter any components of the specified complex number evaluate to
                a value that is not a number (System.Double.NaN).
            </summary>
            <param name="value">A complex number.</param>
            <returns>true if any component evaluates to System.Double.NaN; otherwise, false.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Ceiling(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns a complex number where each component is the smallest integral value that
                is greater than or equal to the specified component.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The ceiling of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Floor(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns a complex number where each component is the largest integral value that
                is less than or equal to the specified component.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The floor of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Truncate(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns a complex number where each component is the integral part of the specified component.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The integral of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Fractional(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns a complex number where each component is the fractional part of the specified component.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The fractional of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Round(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns a complex number where each component is rounded to the nearest integral value.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The result of rounding value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Round(SpaceEngine.Core.Numerics.Complex,System.Int32)">
            <summary>
                Returns a complex number where each component is rounded to the nearest integral value.
            </summary>
            <param name="value">A complex number.</param>
            <param name="digits">The number of fractional digits in the return value.</param>
            <returns>The result of rounding value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Round(SpaceEngine.Core.Numerics.Complex,System.MidpointRounding)">
            <summary>
                Returns a complex number where each component is rounded to the nearest integral value.
            </summary>
            <param name="value">A complex number.</param>
            <param name="mode">Specification for how to round value if it is midway between two other numbers.</param>
            <returns>The result of rounding value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Round(SpaceEngine.Core.Numerics.Complex,System.Int32,System.MidpointRounding)">
            <summary>
                Returns a complex number where each component is rounded to the nearest integral value.
            </summary>
            <param name="value">A complex number.</param>
            <param name="digits">The number of fractional digits in the return value.</param>
            <param name="mode">Specification for how to round value if it is midway between two other numbers.</param>
            <returns>The result of rounding value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Sqrt(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns the square root of a specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The square root of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Pow(SpaceEngine.Core.Numerics.Complex,SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns a specified complex number raised to a power specified by a complex number.
            </summary>
            <param name="value">A complex number to be raised to a power.</param>
            <param name="power">A complex number that specifies a power.</param>
            <returns>The complex number value raised to the power power.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Exp(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns e raised to the power specified by a complex number.
            </summary>
            <param name="value">A complex number that specifies a power.</param>
            <returns>The number e raised to the power value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Log(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns the natural (base e) logarithm of a specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The natural (base e) logarithm of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Log(SpaceEngine.Core.Numerics.Complex,System.Double)">
            <summary>
                Returns the logarithm of a specified complex number in a specified base.
            </summary>
            <param name="value">A complex number.</param>
            <param name="baseValue">The base of the logarithm.</param>
            <returns>The logarithm of value in base baseValue.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Log10(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns the base-10 logarithm of a specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The base-10 logarithm of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Cos(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns the cosine of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The cosine of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Acos(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns the angle that is the arc cosine of the specified complex number.
            </summary>
            <param name="value">A complex number that represents a cosine.</param>
            <returns>The angle, measured in radians, which is the arc cosine of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Cosh(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns the hyperbolic cosine of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The hyperbolic cosine of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Acosh(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns the hyperbolic angle whose hyperbolic cosine is the specified number.
            </summary>
            <param name="value">A number representing a hyperbolic cosine.</param>
            <returns>A hyperbolic angle, θ, measured in radians.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Sin(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns the sine of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The sine of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Asin(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns the angle that is the arc sine of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The angle which is the arc sine of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Sinh(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns the hyperbolic sine of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The hyperbolic sine of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Asinh(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns the hyperbolic angle whose hyperbolic sine is the specified number.
            </summary>
            <param name="value">A number representing a hyperbolic sine.</param>
            <returns>A hyperbolic angle, θ, measured in radians.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Tan(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns the tangent of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The tangent of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Atan(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns the angle that is the arc tangent of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The angle that is the arc tangent of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Tanh(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns the hyperbolic tangent of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The hyperbolic tangent of value.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Atanh(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns the hyperbolic angle whose hyperbolic tangent is the specified number.
            </summary>
            <param name="value">A number representing a hyperbolic tangent.</param>
            <returns>A hyperbolic angle, θ, measured in radians.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Lerp(SpaceEngine.Core.Numerics.Complex,SpaceEngine.Core.Numerics.Complex,System.Double)">
            <summary>
                Performs a linear interpolation between two complex numbers.
            </summary>
            <param name="start">Start complex number.</param>
            <param name="end">End complex number.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two complex numbers.</returns>
            <remarks>
                This method performs the linear interpolation based on the following formula.
                <code>start + (end - start) * amount</code>
                Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
                will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Slerp(SpaceEngine.Core.Numerics.Complex,SpaceEngine.Core.Numerics.Complex,System.Double)">
            <summary>
                Interpolates between two unit complex numbers, using spherical linear interpolation.
            </summary>
            <param name="start">Start complex number.</param>
            <param name="end">End complex number.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The spherical linear interpolation of the two complex numbers.</returns>
            <remarks>
                Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
                will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.op_Explicit(System.Decimal)~SpaceEngine.Core.Numerics.Complex">
            <summary>
                Defines an explicit conversion of a System.Decimal value to a complex number.
            </summary>
            <param name="value">The value to convert to a complex number.</param>
            <returns>
                A complex number that has a real component equal to value and an imaginary
                component equal to zero.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.op_Implicit(System.Double)~SpaceEngine.Core.Numerics.Complex">
            <summary>
                Defines an implicit conversion of a double-precision floating-point number
                to a complex number.
            </summary>
            <param name="value">The value to convert to a complex number.</param>
            <returns>
                A complex number that has a real component equal to value and an imaginary
                component equal to zero.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.op_Implicit(System.Single)~SpaceEngine.Core.Numerics.Complex">
            <summary>
                Defines an implicit conversion of a single-precision floating-point number
                to a complex number.
            </summary>
            <param name="value">The value to convert to a complex number.</param>
            <returns>
                A complex number that has a real component equal to value and an imaginary
                component equal to zero.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.op_Implicit(System.Int32)~SpaceEngine.Core.Numerics.Complex">
            <summary>
                Defines an implicit conversion of a 32-bit signed integer
                to a complex number.
            </summary>
            <param name="value">The value to convert to a complex number.</param>
            <returns>
                A complex number that has a real component equal to value and an imaginary
                component equal to zero.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.op_Implicit(System.Int64)~SpaceEngine.Core.Numerics.Complex">
            <summary>
                Defines an implicit conversion of a 64-bit signed integer
                to a complex number.
            </summary>
            <param name="value">The value to convert to a complex number.</param>
            <returns>
                A complex number that has a real component equal to value and an imaginary
                component equal to zero.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.op_Implicit(System.SByte)~SpaceEngine.Core.Numerics.Complex">
            <summary>
                Defines an implicit conversion of a signed byte
                to a complex number.
            </summary>
            <param name="value">The value to convert to a complex number.</param>
            <returns>
                A complex number that has a real component equal to value and an imaginary
                component equal to zero.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.op_Implicit(System.Int16)~SpaceEngine.Core.Numerics.Complex">
            <summary>
                Defines an implicit conversion of a 16-bit signed integer
                to a complex number.
            </summary>
            <param name="value">The value to convert to a complex number.</param>
            <returns>
                A complex number that has a real component equal to value and an imaginary
                component equal to zero.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.op_Implicit(System.UInt32)~SpaceEngine.Core.Numerics.Complex">
            <summary>
                Defines an implicit conversion of a 32-bit unsigned integer
                to a complex number.
            </summary>
            <param name="value">The value to convert to a complex number.</param>
            <returns>
                A complex number that has a real component equal to value and an imaginary
                component equal to zero.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.op_Implicit(System.UInt64)~SpaceEngine.Core.Numerics.Complex">
            <summary>
                Defines an implicit conversion of a 64-bit unsigned integer
                to a complex number.
            </summary>
            <param name="value">The value to convert to a complex number.</param>
            <returns>
                A complex number that has a real component equal to value and an imaginary
                component equal to zero.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.op_Implicit(System.Byte)~SpaceEngine.Core.Numerics.Complex">
            <summary>
                Defines an implicit conversion of a unsigned byte integer
                to a complex number.
            </summary>
            <param name="value">The value to convert to a complex number.</param>
            <returns>
                A complex number that has a real component equal to value and an imaginary
                component equal to zero.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.op_Implicit(System.UInt16)~SpaceEngine.Core.Numerics.Complex">
            <summary>
                Defines an implicit conversion of a 16-bit unsigned integer
                to a complex number.
            </summary>
            <param name="value">The value to convert to a complex number.</param>
            <returns>
                A complex number that has a real component equal to value and an imaginary
                component equal to zero.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.GetHashCode">
            <summary>
                Returns the hash code for the current Complex object.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Equals(System.Object)">
            <summary>
                Returns a value that indicates whether the current instance and a specified
                object have the same value.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>
                true if the obj parameter is a Complex object and its value
                is equal to the current Complex object; otherwise, false.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Equals(SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns a value that indicates whether the current instance and a specified
                complex number have the same value.
            </summary>
            <param name="other">The complex number to compare.</param>
            <returns>true if this complex number and value have the same value; otherwise, false.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.Equals(SpaceEngine.Core.Numerics.Complex,SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns a value that indicates whether two complex numbers are equal.
            </summary>
            <param name="left">The first complex number to compare.</param>
            <param name="right">The second complex number to compare.</param>
            <returns>true if the left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.op_Equality(SpaceEngine.Core.Numerics.Complex,SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns a value that indicates whether two complex numbers are equal.
            </summary>
            <param name="left">The first complex number to compare.</param>
            <param name="right">The second complex number to compare.</param>
            <returns>true if the left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.op_Inequality(SpaceEngine.Core.Numerics.Complex,SpaceEngine.Core.Numerics.Complex)">
            <summary>
                Returns a value that indicates whether two complex numbers are not equal.
            </summary>
            <param name="left">The first complex number to compare.</param>
            <param name="right">The second complex number to compare.</param>
            <returns>true if left and right are not equal; otherwise, false.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.ToString">
            <summary>
                Converts the value of the current complex number to its equivalent string
                representation in Cartesian form.
            </summary>
            <returns>The string representation of the current instance in Cartesian form.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.ToString(System.IFormatProvider)">
            <summary>
                Converts the value of the current complex number to its equivalent string
                representation in Cartesian form by using the specified culture-specific
                formatting information.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>
                The string representation of the current instance in Cartesian form, as specified
                by provider.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.ToString(System.String)">
            <summary>
                Converts the value of the current complex number to its equivalent string
                representation in Cartesian form by using the specified format for its real
                and imaginary parts.
            </summary>
            <param name="format">A standard or custom numeric format string.</param>
            <returns>The string representation of the current instance in Cartesian form.</returns>
            <exception cref="T:System.FormatException">format is not a valid format string.</exception>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Complex.ToString(System.String,System.IFormatProvider)">
            <summary>
                Converts the value of the current complex number to its equivalent string
                representation in Cartesian form by using the specified format and culture-specific
                format information for its real and imaginary parts.
            </summary>
            <param name="format">A standard or custom numeric format string.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>
                The string representation of the current instance in Cartesian form, as specified
                by format and provider.
            </returns>
            <exception cref="T:System.FormatException">format is not a valid format string.</exception>
        </member>
        <member name="T:SpaceEngine.Core.Numerics.Constants">
            <summary>
                Provides common mathematical and physical constants.
            </summary>
        </member>
        <member name="F:SpaceEngine.Core.Numerics.Constants.Rad2Deg">
            <summary>
              <para>Radians-to-degrees conversion constant (Read Only).</para>
            Originally equals to <code>180.0 / Math.PI</code>
            </summary>
        </member>
        <member name="F:SpaceEngine.Core.Numerics.Constants.Deg2Rad">
            <summary>
              <para>Degrees-to-radians conversion constant (Read Only).</para>
            Originally equals to <code>Math.PI / 180.0</code>
            </summary>
        </member>
        <member name="F:SpaceEngine.Core.Numerics.Constants.E">
            <summary>
                Represents the natural logarithmic base, specified by the constant, e.
            </summary>
        </member>
        <member name="F:SpaceEngine.Core.Numerics.Constants.Pi">
            <summary>
                Represents the ratio of the circumference of a circle to its diameter, specified
                by the constant, π.
            </summary>
        </member>
        <member name="F:SpaceEngine.Core.Numerics.Constants.Tau">
            <summary>
                Represents the ratio of the circumference of a circle to its radius, specified
                by the constant, τ.
            </summary>
        </member>
        <member name="F:SpaceEngine.Core.Numerics.Constants.C">
            <summary>
                The speed of light in a vacuum, in meters per second.
            </summary>
        </member>
        <member name="F:SpaceEngine.Core.Numerics.Constants.G">
            <summary>
                The gravitational constant, in meters cubed per kilogram second squared.
            </summary>
        </member>
        <member name="T:SpaceEngine.Core.Numerics.Functions">
            <summary>
                Provides static methods for trigonometric, logarithmic, and other common mathematical functions.
            </summary>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Fibonnacci(System.Int32)">
            <summary>
                Returns the nth fibonnacci number.
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Barycentric(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Returns the Cartesian coordinate for one axis of a point that is defined
                by a given triangle and two normalized barycentric (areal) coordinates.
            </summary>
            <param name="value1">The coordinate on one axis of vertex 1 of the defining triangle.</param>
            <param name="value2">The coordinate on the same axis of vertex 2 of the defining triangle.</param>
            <param name="value3">The coordinate on the same axis of vertex 3 of the defining triangle.</param>
            <param name="amount1">
                The normalized barycentric (areal) coordinate b2, equal to the weighting
                factor for vertex 2, the coordinate of which is specified in value2.
            </param>
            <param name="amount2">
                The normalized barycentric (areal) coordinate b3, equal to the weighting
                factor for vertex 3, the coordinate of which is specified in value3.
            </param>
            <returns>
                Cartesian coordinate of the specified point with respect to the axis being
                used.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Lerp(System.Single,System.Single,System.Single)">
            <summary>
                Performs a linear interpolation between two values.
            </summary>
            <param name="value1">First value.</param>
            <param name="value2">Second value.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="value2" />.</param>
            <returns>The linear interpolation of the two values.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Lerp(System.Double,System.Double,System.Double)">
            <summary>
                Performs a linear interpolation between two values.
            </summary>
            <param name="value1">First value.</param>
            <param name="value2">Second value.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="value2" />.</param>
            <returns>The linear interpolation of the two values.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Hermite(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First value.</param>
            <param name="tangent1">First tangent.</param>
            <param name="value2">Second value.</param>
            <param name="tangent2">Second tangent.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="value2" />.</param>
            <returns>The Hermite spline interpolation of the two values.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.CatmullRom(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="value3">The third value.</param>
            <param name="value4">The fourth value.</param>
            <param name="amount">
                Value between 0 and 1 indicating the weight between <paramref name="value2" /> and
                <paramref name="value3" />.
            </param>
            <returns>The Catmull-Rom interpolation of the four values.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.SmoothStep(System.Double,System.Double,System.Double)">
            <summary>
                The function interpolates smoothly between two input values based on a third one that should be between the first
                two.
                The returned value is clamped between 0 and 1.
            </summary>
            <param name="value1">First value.</param>
            <param name="value2">Second value.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="value2" />.</param>
            <returns>The smooth interpolation of the two values.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.SmootherStep(System.Double,System.Double,System.Double)">
            <summary>
                The function interpolates smoothly between two input values based on a third one that should be between the first
                two.
                The returned value is clamped between 0 and 1.
            </summary>
            <param name="value1">First value.</param>
            <param name="value2">Second value.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="value2" />.</param>
            <returns>The smooth interpolation of the two values.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.IsPowerOf2(System.Int32)">
            <summary>
                Checks if a number is a power of 2.
            </summary>
            <param name="value">A number to check.</param>
            <returns>true if value is a power of two, otherwise false.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.IsPowerOf2(System.Int64)">
            <summary>
                Checks if a number is a power of 2.
            </summary>
            <param name="value">A number to check.</param>
            <returns>true if value is a power of two, otherwise false.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.ModPow(System.Int64,System.Int64,System.Int64)">
            <summary>
                Performs modulus division on a number raised to the power of another number.
            </summary>
            <param name="value">The number to raise to the exponent power.</param>
            <param name="exponent">The exponent to raise value by.</param>
            <param name="modulus">The value to divide valueexponent by.</param>
            <returns>The remainder after dividing valueexponent by modulus.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.ModPow(System.Int32,System.Int32,System.Int32)">
            <summary>
                Performs modulus division on a number raised to the power of another number.
            </summary>
            <param name="value">The number to raise to the exponent power.</param>
            <param name="exponent">The exponent to raise value by.</param>
            <param name="modulus">The value to divide valueexponent by.</param>
            <returns>The remainder after dividing valueexponent by modulus.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.ToDegrees(System.Double)">
            <summary>
                Converts a number in radians to degrees.
            </summary>
            <param name="radians">A number in radians.</param>
            <returns>The number converted to degrees.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.ToRadians(System.Double)">
            <summary>
                Converts a number in degrees to radians.
            </summary>
            <param name="degrees">A number in degrees.</param>
            <returns>The number converted to radians.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Sin(System.Double)">
            <summary>
                Returns the sine of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians.</param>
            <returns>
                The sine of a.
                If a is equal to System.Double.NaN, System.Double.NegativeInfinity,
                or System.Double.PositiveInfinity, this method returns System.Double.NaN.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Sin(System.Single)">
            <summary>
                Returns the sine of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians.</param>
            <returns>
                The sine of a.
                If a is equal to System.Single.NaN, System.Single.NegativeInfinity,
                or System.Single.PositiveInfinity, this method returns System.Single.NaN.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Cos(System.Double)">
            <summary>
                Returns the cosine of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians.</param>
            <returns>
                The cosine of a.
                If a is equal to System.Double.NaN, System.Double.NegativeInfinity,
                or System.Double.PositiveInfinity, this method returns System.Double.NaN.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Cos(System.Single)">
            <summary>
                Returns the cosine of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians.</param>
            <returns>
                The cosine of a.
                If a is equal to System.Single.NaN, System.Single.NegativeInfinity,
                or System.Single.PositiveInfinity, this method returns System.Single.NaN.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Tan(System.Double)">
            <summary>
                Returns the tangent of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians.</param>
            <returns>
                The tangent of a.
                If a is equal to System.Double.NaN, System.Double.NegativeInfinity,
                or System.Double.PositiveInfinity, this method returns System.Double.NaN.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Tan(System.Single)">
            <summary>
                Returns the tangent of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians.</param>
            <returns>
                The tangent of a.
                If a is equal to System.Single.NaN, System.Single.NegativeInfinity,
                or System.Single.PositiveInfinity, this method returns System.Single.NaN.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Acos(System.Double)">
            <summary>
                Returns the angle whose cosine is the specified number.
            </summary>
            <param name="x">A number representing a cosine, where -1 ≤ x ≤ 1.</param>
            <returns>
                An angle, θ, measured in radians, such that 0 ≤ θ ≤ π
                or System.Double.NaN if x &lt; -1 or x > 1.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Acos(System.Single)">
            <summary>
                Returns the angle whose cosine is the specified number.
            </summary>
            <param name="x">A number representing a cosine, where -1 ≤ x ≤ 1.</param>
            <returns>
                An angle, θ, measured in radians, such that 0 ≤ θ ≤ π
                or System.Single.NaN if x &lt; -1 or x > 1.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Asin(System.Double)">
            <summary>
                Returns the angle whose sine is the specified number.
            </summary>
            <param name="x">A number representing a sine, where -1 ≤ x ≤ 1.</param>
            <returns>
                An angle, θ, measured in radians, such that -π/2 ≤ θ ≤ π/2
                or System.Double.NaN if x &lt; -1 or x > 1.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Asin(System.Single)">
            <summary>
                Returns the angle whose sine is the specified number.
            </summary>
            <param name="x">A number representing a sine, where -1 ≤ x ≤ 1.</param>
            <returns>
                An angle, θ, measured in radians, such that -π/2 ≤ θ ≤ π/2
                or System.Single.NaN if x &lt; -1 or x > 1.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Atan(System.Double)">
            <summary>
                Returns the angle whose tangent is the specified number.
            </summary>
            <param name="x">A number representing a tangent.</param>
            <returns>
                An angle, θ, measured in radians, such that -π/2 ≤ θ ≤ π/2.
                or System.Double.NaN if x equals System.Double.NaN,
                or -π/2 if x equals System.Double.NegativeInfinity,
                or π/2 if x equals System.Double.PositiveInfinity.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Atan(System.Single)">
            <summary>
                Returns the angle whose tangent is the specified number.
            </summary>
            <param name="x">A number representing a tangent.</param>
            <returns>
                An angle, θ, measured in radians, such that -π/2 ≤ θ ≤ π/2.
                or System.Single.NaN if x equals System.Single.NaN,
                or -π/2 if x equals System.Single.NegativeInfinity,
                or π/2 if x equals System.Single.PositiveInfinity.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Atan2(System.Double,System.Double)">
            <summary>
                Returns the angle whose tangent is the quotient of two specified numbers.
            </summary>
            <param name="y">The y coordinate of a point.</param>
            <param name="x">The x coordinate of a point.</param>
            <returns>
                An angle, θ, measured in radians, such that -π ≤ θ ≤ π, and tan(θ) = y / x, where
                (x, y) is a point in the Cartesian plane.
                Observe the following:
                For (x, y) in quadrant 1, 0 &lt; θ &lt; π/2.
                For (x, y) in quadrant 2, π/2 &lt; θ ≤ π.
                For (x, y) in quadrant 3, -π &lt; θ &lt; -π/2.
                For (x, y) in quadrant 4, -π/2 &lt; θ &lt; 0.
                For points on the boundaries of the quadrants, the return value is the following:
                If y is 0 and x is not negative, θ = 0.
                If y is 0 and x is negative, θ = π.
                If y is positive and x is 0, θ = π/2.
                If y is negative and x is 0, θ = -π/2.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Atan2(System.Single,System.Single)">
            <summary>
                Returns the angle whose tangent is the quotient of two specified numbers.
            </summary>
            <param name="y">The y coordinate of a point.</param>
            <param name="x">The x coordinate of a point.</param>
            <returns>
                An angle, θ, measured in radians, such that -π ≤ θ ≤ π, and tan(θ) = y / x, where
                (x, y) is a point in the Cartesian plane.
                Observe the following:
                For (x, y) in quadrant 1, 0 &lt; θ &lt; π/2.
                For (x, y) in quadrant 2, π/2 &lt; θ ≤ π.
                For (x, y) in quadrant 3, -π &lt; θ &lt; -π/2.
                For (x, y) in quadrant 4, -π/2 &lt; θ &lt; 0.
                For points on the boundaries of the quadrants, the return value is the following:
                If y is 0 and x is not negative, θ = 0.
                If y is 0 and x is negative, θ = π.
                If y is positive and x is 0, θ = π/2.
                If y is negative and x is 0, θ = -π/2.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Cosh(System.Double)">
            <summary>
                Returns the hyperbolic cosine of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians.</param>
            <returns>
                The hyperbolic cosine of value.
                If value is equal to System.Double.NegativeInfinity
                or System.Double.PositiveInfinity, System.Double.PositiveInfinity is returned.
                If value is equal to System.Double.NaN, System.Double.NaN is returned.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Cosh(System.Single)">
            <summary>
                Returns the hyperbolic cosine of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians.</param>
            <returns>
                The hyperbolic cosine of value.
                If value is equal to System.Single.NegativeInfinity
                or System.Single.PositiveInfinity, System.Single.PositiveInfinity is returned.
                If value is equal to System.Single.NaN, System.Single.NaN is returned.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Sinh(System.Double)">
            <summary>
                Returns the hyperbolic sine of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians.</param>
            <returns>
                The hyperbolic sine of value.
                If value is equal to System.Double.NegativeInfinity,
                System.Double.PositiveInfinity, or System.Double.NaN,
                this method returns a System.Double equal to value.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Sinh(System.Single)">
            <summary>
                Returns the hyperbolic sine of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians.</param>
            <returns>
                The hyperbolic sine of value.
                If value is equal to System.Single.NegativeInfinity,
                System.Single.PositiveInfinity, or System.Single.NaN,
                this method returns a System.Single equal to value.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Tanh(System.Double)">
            <summary>
                Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians.</param>
            <returns>
                The hyperbolic tangent of value.
                If value is equal to System.Double.NegativeInfinity, this method returns -1.
                If value is equal to System.Double.PositiveInfinity, this method returns 1.
                If value is equal to System.Double.NaN, this method returns System.Double.NaN.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Tanh(System.Single)">
            <summary>
                Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians.</param>
            <returns>
                The hyperbolic tangent of value.
                If value is equal to System.Single.NegativeInfinity, this method returns -1.
                If value is equal to System.Single.PositiveInfinity, this method returns 1.
                If value is equal to System.Single.NaN, this method returns System.Single.NaN.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Acosh(System.Double)">
            <summary>
                Returns the hyperbolic angle whose hyperbolic cosine is the specified number.
            </summary>
            <param name="x">A number representing a hyperbolic cosine, where 1 ≤ x.</param>
            <returns>A hyperbolic angle, θ, measured in radians.</returns>
            <returns>System.Double.NaN if x &lt; 1.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Acosh(System.Single)">
            <summary>
                Returns the hyperbolic angle whose hyperbolic cosine is the specified number.
            </summary>
            <param name="x">A number representing a hyperbolic cosine, where 1 ≤ x.</param>
            <returns>A hyperbolic angle, θ, measured in radians.</returns>
            <returns>System.Single.NaN if x &lt; 1.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Asinh(System.Double)">
            <summary>
                Returns the hyperbolic angle whose hyperbolic sine is the specified number.
            </summary>
            <param name="x">A number representing a hyperbolic sine.</param>
            <returns>A hyperbolic angle, θ, measured in radians.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Asinh(System.Single)">
            <summary>
                Returns the hyperbolic angle whose hyperbolic sine is the specified number.
            </summary>
            <param name="x">A number representing a hyperbolic sine.</param>
            <returns>A hyperbolic angle, θ, measured in radians.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Atanh(System.Double)">
            <summary>
                Returns the hyperbolic angle whose hyperbolic tangent is the specified number.
            </summary>
            <param name="x">A number representing a hyperbolic tangent, where |x| ≤ 1.</param>
            <returns>A hyperbolic angle, θ, measured in radians.</returns>
            <returns>System.Double.NaN if |x| ≥ 1.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Atanh(System.Single)">
            <summary>
                Returns the hyperbolic angle whose hyperbolic tangent is the specified number.
            </summary>
            <param name="x">A number representing a hyperbolic tangent, where |x| ≤ 1.</param>
            <returns>A hyperbolic angle, θ, measured in radians.</returns>
            <returns>System.Single.NaN if |d| ≥ 1.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Exp(System.Double)">
            <summary>
                Returns e raised to the specified power.
            </summary>
            <param name="x">A number specifying a power.</param>
            <returns>
                The number e raised to the power x.
                If x equals System.Double.NaN or System.Double.PositiveInfinity, that value is returned.
                If x equals System.Double.NegativeInfinity, 0 is returned.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Exp(System.Single)">
            <summary>
                Returns e raised to the specified power.
            </summary>
            <param name="x">A number specifying a power.</param>
            <returns>
                The number e raised to the power x.
                If x equals System.Single.NaN or System.Single.PositiveInfinity, that value is returned.
                If x equals System.Single.NegativeInfinity, 0 is returned.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Log(System.Double)">
            <summary>
                Returns the natural (base e) logarithm of a specified number.
            </summary>
            <param name="x">A number whose logarithm is to be found.</param>
            <returns>
                One of the values in the following table.
                d parameterReturn value Positive
                The natural logarithm of d; that is, ln d, or log edZero System.Double.NegativeInfinityNegative
                System.Double.NaNEqual to System.Double.NaNSystem.Double.NaNEqual to
                System.Double.PositiveInfinitySystem.Double.PositiveInfinity
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Log(System.Single)">
            <summary>
                Returns the natural (base e) logarithm of a specified number.
            </summary>
            <param name="x">A number whose logarithm is to be found.</param>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Pow(System.Double,System.Double)">
            <summary>
                Returns a specified number raised to the specified power.
            </summary>
            <param name="x">A double-precision floating-point number to be raised to a power.</param>
            <param name="y">A double-precision floating-point number that specifies a power.</param>
            <returns>The number x raised to the power y.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Pow(System.Single,System.Single)">
            <summary>
                Returns a specified number raised to the specified power.
            </summary>
            <param name="x">A single-precision floating-point number to be raised to a power.</param>
            <param name="y">A single-precision floating-point number that specifies a power.</param>
            <returns>The number x raised to the power y.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Sqrt(System.Double)">
            <summary>
                Returns the square root of a specified number.
            </summary>
            <param name="x">A number.</param>
            <returns>
                The square root of x if x is zero or positive, else returns NaN.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Sqrt(System.Single)">
            <summary>
                Returns the square root of a specified number.
            </summary>
            <param name="x">A number.</param>
            <returns>
                The square root of x if x is zero or positive, else returns NaN.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Fractional(System.Double)">
            <summary>
                Calculates the fractional part of a specified double-precision floating-point number.
            </summary>
            <param name="value">A double-precision floating-point number.</param>
            <returns>
                The fractional part of value; that is, the number that remains after any integral
                digits have been discarded.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Fractional(System.Single)">
            <summary>
                Calculates the fractional part of a specified single-precision floating-point number.
            </summary>
            <param name="value">A single-precision floating-point number.</param>
            <returns>
                The fractional part of value; that is, the number that remains after any integral
                digits have been discarded.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Clamp(System.Byte,System.Byte,System.Byte)">
            <summary>
                Constrains a value to a given range.
            </summary>
            <param name="value">A number to constrain.</param>
            <param name="min">The minimum value in the range.</param>
            <param name="max">The maximum value in the range.</param>
            <returns>
                If value is less than min, return min.
                If value is greater than max return max.
                Else return value.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Clamp(System.SByte,System.SByte,System.SByte)">
            <summary>
                Constrains a value to a given range.
            </summary>
            <param name="value">A number to constrain.</param>
            <param name="min">The minimum value in the range.</param>
            <param name="max">The maximum value in the range.</param>
            <returns>
                If value is less than min, return min.
                If value is greater than max return max.
                Else return value.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Clamp(System.Int16,System.Int16,System.Int16)">
            <summary>
                Constrains a value to a given range.
            </summary>
            <param name="value">A number to constrain.</param>
            <param name="min">The minimum value in the range.</param>
            <param name="max">The maximum value in the range.</param>
            <returns>
                If value is less than min, return min.
                If value is greater than max return max.
                Else return value.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Clamp(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
                Constrains a value to a given range.
            </summary>
            <param name="value">A number to constrain.</param>
            <param name="min">The minimum value in the range.</param>
            <param name="max">The maximum value in the range.</param>
            <returns>
                If value is less than min, return min.
                If value is greater than max return max.
                Else return value.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
                Constrains a value to a given range.
            </summary>
            <param name="value">A number to constrain.</param>
            <param name="min">The minimum value in the range.</param>
            <param name="max">The maximum value in the range.</param>
            <returns>
                If value is less than min, return min.
                If value is greater than max return max.
                Else return value.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Clamp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                Constrains a value to a given range.
            </summary>
            <param name="value">A number to constrain.</param>
            <param name="min">The minimum value in the range.</param>
            <param name="max">The maximum value in the range.</param>
            <returns>
                If value is less than min, return min.
                If value is greater than max return max.
                Else return value.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
                Constrains a value to a given range.
            </summary>
            <param name="value">A number to constrain.</param>
            <param name="min">The minimum value in the range.</param>
            <param name="max">The maximum value in the range.</param>
            <returns>
                If value is less than min, return min.
                If value is greater than max return max.
                Else return value.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Clamp(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
                Constrains a value to a given range.
            </summary>
            <param name="value">A number to constrain.</param>
            <param name="min">The minimum value in the range.</param>
            <param name="max">The maximum value in the range.</param>
            <returns>
                If value is less than min, return min.
                If value is greater than max return max.
                Else return value.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Clamp(System.Single,System.Single,System.Single)">
            <summary>
                Constrains a value to a given range.
            </summary>
            <param name="value">A number to constrain.</param>
            <param name="min">The minimum value in the range.</param>
            <param name="max">The maximum value in the range.</param>
            <returns>
                If value is less than min, return min.
                If value is greater than max return max.
                Else return value.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Clamp(System.Double,System.Double,System.Double)">
            <summary>
                Constrains a value to a given range.
            </summary>
            <param name="value">A number to constrain.</param>
            <param name="min">The minimum value in the range.</param>
            <param name="max">The maximum value in the range.</param>
            <returns>
                If value is less than min, return min.
                If value is greater than max return max.
                Else return value.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Saturate(System.Single)">
            <summary>
                Clamps a number between 0 and 1.
            </summary>
            <param name="value">A number.</param>
            <returns>value clamped between 0 and 1.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Saturate(System.Double)">
            <summary>
                Clamps a number between 0 and 1.
            </summary>
            <param name="value">A number.</param>
            <returns>value clamped between 0 and 1.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Wrap(System.Double,System.Double,System.Double)">
            <summary>
                Wraps a number between min and max.
            </summary>
            <param name="value">The number to wrap.</param>
            <param name="min">The maximum value.</param>
            <param name="max">The minimum value.</param>
            <returns>value wrapped around the range [min, max].</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Wrap(System.Single,System.Single,System.Single)">
            <summary>
                Wraps a number between min and max.
            </summary>
            <param name="value">The number to wrap.</param>
            <param name="min">The maximum value.</param>
            <param name="max">The minimum value.</param>
            <returns>value wrapped around the range [min, max].</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.FloorDivide(System.Int32,System.Int32)">
            <summary>
                Floored division.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <returns>The quotient.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.FloorDivide(System.Int64,System.Int64)">
            <summary>
                Floored division.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <returns>The quotient.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Divide(System.Int32,System.Int32)">
            <summary>
                Euclidean division.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <returns>The quotient.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Divide(System.Int64,System.Int64)">
            <summary>
                Euclidean division.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <returns>The quotient.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Modulus(System.Int32,System.Int32)">
            <summary>
                Euclidean modulus.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <returns>The modulus.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Modulus(System.Int64,System.Int64)">
            <summary>
                Euclidean modulus.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <returns>The modulus.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Modulus(System.Double,System.Double)">
            <summary>
                Euclidean modulus.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <returns>The modulus.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.Modulus(System.Single,System.Single)">
            <summary>
                Euclidean modulus.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <returns>The modulus.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.GCD(System.Int32,System.Int32)">
            <summary>
                Calculates the greatest common divisor of two numbers.
            </summary>
            <param name="a">The first number.</param>
            <param name="b">The second number.</param>
            <returns>
                The greatest common divisor, also known as the greatest common factor,
                or highest common factor, of the two given numbers.
            </returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Functions.LCM(System.Int32,System.Int32)">
            <summary>
                Calculates the lowest common multiple of two numbers.
            </summary>
            <param name="a">The first number.</param>
            <param name="b">The second number.</param>
            <returns>
                The lowest common multiple, also known as the least common multiple,
                or smallest common multiple, of the two given numbers.
            </returns>
        </member>
        <member name="T:SpaceEngine.Core.Numerics.Geometry.PolarCoordinate">
            <summary>
                Represents a polar coordinate, given by azimuth and radius.
            </summary>
        </member>
        <member name="F:SpaceEngine.Core.Numerics.Geometry.PolarCoordinate.Rho">
            <summary>
                Radius.
            </summary>
            <remarks>
                The value of rho is always 0 or greater.
            </remarks>
        </member>
        <member name="F:SpaceEngine.Core.Numerics.Geometry.PolarCoordinate.Theta">
            <summary>
                Azimuth angle, in radians.
            </summary>
            <remarks>
                The value of theta is always between 0 and 2π.
            </remarks>
        </member>
        <member name="T:SpaceEngine.Core.Numerics.Geometry.SphericalCoordinate">
            <summary>
                Represents a polar coordinate, given by inclination, azimuth and radius.
            </summary>
        </member>
        <member name="F:SpaceEngine.Core.Numerics.Geometry.SphericalCoordinate.Rho">
            <summary>
                Radius.
            </summary>
            <remarks>
                The value of rho is always 0 or greater.
            </remarks>
        </member>
        <member name="F:SpaceEngine.Core.Numerics.Geometry.SphericalCoordinate.Theta">
            <summary>
                Azimuth angle, in radians.
            </summary>
            <remarks>
                The value of theta is always between 0 and 2π.
            </remarks>
        </member>
        <member name="F:SpaceEngine.Core.Numerics.Geometry.SphericalCoordinate.Phi">
            <summary>
                Inclination  angle, in radians.
            </summary>
            <remarks>
                The value of phi is always between 0 and π.
            </remarks>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Shapes.Frustum3d.GetFrustumPlanes(SpaceEngine.Core.Numerics.Matrices.Matrix4x4d)">
            <summary>
                Extract the frustum planes from a projection matrix.
            </summary>
            <param name="mat">The projection matrix.</param>
            <returns>Returns frustum planes extracted from specified projection matrix.</returns>
        </member>
        <member name="M:SpaceEngine.Core.Numerics.Shapes.Frustum3d.GetFrustumPlanes(UnityEngine.Matrix4x4)">
            <summary>
                Extract the frustum planes from a projection matrix.
            </summary>
            <param name="mat">The projection matrix.</param>
            <returns>Returns frustum planes extracted from specified projection matrix.</returns>
        </member>
    </members>
</doc>
