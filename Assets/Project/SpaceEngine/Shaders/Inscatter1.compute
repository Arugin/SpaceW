/*
 * Author: Eric Bruneton
 * Modified and ported to Unity by Justin Hawkins 2014
 * Modified by Denis Ovchinnikov 2015-2018
 */
 
// computes single scattering (line 3 in algorithm 4.1)

#pragma kernel CSMain

#include "SpaceAtmospherePreprocess.cginc"

int layer;

RWTexture3D<float4> deltaSRWrite, deltaSMWrite;

void Integrand(float r, float mu, float muS, float nu, float t, out float3 ray, out float3 mie) 
{ 
    ray = float3(0.0, 0.0, 0.0); 
    mie = float3(0.0, 0.0, 0.0); 

    float ri = sqrt(r * r + t * t + 2.0 * r * mu * t); 
    float muSi = (nu * t + muS * r) / ri; 

    ri = max(Rg, ri); 

    if (muSi >= -sqrt(1.0 - Rg * Rg / (ri * ri))) 
    { 
        float3 ti = Transmittance(r, mu, t) * Transmittance(ri, muSi); 

        ray = exp(-(ri - Rg) / HR) * ti; 
        mie = exp(-(ri - Rg) / HM) * ti; 
    } 
} 

void Inscatter(float r, float mu, float muS, float nu, out float3 ray, out float3 mie) 
{ 
    ray = float3(0.0, 0.0, 0.0); 
    mie = float3(0.0, 0.0, 0.0);

    float dx = Limit(r, mu) / float(INSCATTER_INTEGRAL_SAMPLES); 
    float xi = 0.0; 

    float3 rayi; 
    float3 miei; 

    Integrand(r, mu, muS, nu, 0.0, rayi, miei); 
    
    for (int i = 1; i <= INSCATTER_INTEGRAL_SAMPLES; ++i) 
    { 
        float xj = float(i) * dx; 
        float3 rayj; 
        float3 miej; 
        Integrand(r, mu, muS, nu, xj, rayj, miej); 
        
        ray += (rayi + rayj) / 2.0 * dx; 
        mie += (miei + miej) / 2.0 * dx; 
        xi = xj; 
        rayi = rayj; 
        miei = miej; 
    } 
    
    ray *= betaR.xyz; 
    mie *= betaMSca.xyz; 
} 

[numthreads(NUM_THREADS, NUM_THREADS, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float3 ray; 
    float3 mie;

    float4 dhdH;

    float mu, muS, nu, r;

    float2 coords = float2(id.xy) + 0.5; 
    
    GetLayer(layer, r, dhdH); 
    GetMuMuSNu(coords, r, dhdH, mu, muS, nu); 
    
    Inscatter(r, mu, muS, nu, ray, mie); 
    
    // store separately Rayleigh and Mie contributions, WITHOUT the phase function factor 
    // (cf 'Angular precision') 
    deltaSRWrite[uint3(id.xy, layer)] = float4(ray, 0.0);
    deltaSMWrite[uint3(id.xy, layer)] = float4(mie, 0.0);
}