/*
 * Author: Eric Bruneton
 * Modified and ported to Unity by Justin Hawkins 2014
 * Modified by Denis Ovchinnikov 2015-2018
 */
 
// computes ground irradiance due to skylight E[deltaS] (line 8 in algorithm 4.1)

#pragma kernel CSMain

#include "SpaceAtmospherePreprocess.cginc"

Texture3D<float4> deltaSRRead; 
Texture3D<float4> deltaSMRead; 

RWTexture2D<float4> deltaEWrite;

[numthreads(NUM_THREADS, NUM_THREADS, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float r, muS;

	float2 coords = float2(id.xy) + 0.5; 
	
	GetIrradianceRMuS(coords, r, muS); 
	
	float3 s = float3(sqrt(max(1.0 - muS * muS, 0.0)), 0.0, muS); 
 
	float3 result = float3(0.0, 0.0, 0.0); 

	// integral over 2.PI around x with two nested loops over w directions (theta,phi) -- Eq (15) 

	float dphi = M_PI / float(IRRADIANCE_INTEGRAL_SAMPLES); 
	float dtheta = M_PI / float(IRRADIANCE_INTEGRAL_SAMPLES); 

	for (int iphi = 0; iphi < 2 * IRRADIANCE_INTEGRAL_SAMPLES; ++iphi) 
	{ 
		float phi = (float(iphi) + 0.5) * dphi; 

		for (int itheta = 0; itheta < IRRADIANCE_INTEGRAL_SAMPLES_HALF; ++itheta) 
		{ 

			float theta = (float(itheta) + 0.5) * dtheta; 
			float dw = dtheta * dphi * sin(theta); 

			float3 w = float3(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta)); 

			float nu = dot(s, w); 

			if (first == 1) 
			{ 
				// first iteration is special because Rayleigh and Mie were stored separately, 
				// without the phase functions factors; they must be reintroduced here 
				float pr1 = PhaseFunctionR(nu); 
				float pm1 = PhaseFunctionM(nu); 

				float3 ray1 = Texture4D(deltaSRRead, r, w.z, muS, nu).rgb; 
				float3 mie1 = Texture4D(deltaSMRead, r, w.z, muS, nu).rgb; 

				result += (ray1 * pr1 + mie1 * pm1) * w.z * dw; 
			} 
			else 
			{ 
				result += Texture4D(deltaSRRead, r, w.z, muS, nu).rgb * w.z * dw; 

			} 
		} 
	} 

	deltaEWrite[id.xy] = float4(result, 1.0); 
}