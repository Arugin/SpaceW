/*
 * Author: Eric Bruneton
 * Modified and ported to Unity by Justin Hawkins 2014
 * Modified by Denis Ovchinnikov 2015-2018
 */

// computes transmittance table T using Eq (5)

#pragma kernel CSMain

#include "SpaceAtmospherePreprocess.cginc"

RWTexture2D<float4> transmittanceWrite;

float OpticalDepth(float H, float r, float mu) 
{ 
	float result = 0.0; 
	float dx = Limit(r, mu) / float(TRANSMITTANCE_INTEGRAL_SAMPLES); 
	float xi = 0.0; 
	float yi = exp(-(r - Rg) / H); 
	
	for (int i = 1; i <= TRANSMITTANCE_INTEGRAL_SAMPLES; ++i) 
	{ 
		float xj = float(i) * dx; 
		float yj = exp(-(sqrt(r * r + xj * xj + 2.0 * xj * r * mu) - Rg) / H); 

		result += (yi + yj) / 2.0 * dx; 

		xi = xj; 
		yi = yj; 
	}
	 
	return mu < -sqrt(1.0 - (Rg / r) * (Rg / r)) ? 1e9 : result; 
} 

[numthreads(NUM_THREADS, NUM_THREADS, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float r, muS; 

	GetTransmittanceRMu(float2(id.xy), r, muS); 
	
	float4 depth = betaR * OpticalDepth(HR, r, muS) + betaMEx * OpticalDepth(HM, r, muS); 

	transmittanceWrite[id.xy] = exp(-depth); // Eq (5);
}